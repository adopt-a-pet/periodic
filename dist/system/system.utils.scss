
$color-ucla-gold: rgb(255, 186, 10);
$color-ucla-gold-darker: rgb(179, 128, 0);
$color-vermilion-lighter: rgb(244, 151, 138);
$color-vermilion-darker: rgb(154, 31, 14);
$color-ucla-gold-lighter: rgb(255, 219, 128);
$color-bleu-de-france-dark: rgb(16, 112, 209);
$color-bleu-de-france-light: rgb(84, 163, 242);
$color-silver: rgb(127, 136, 145);
$color-forty-per-lighter-grey: rgb(0, 0, 0);
$color-white: rgb(255, 255, 255);
$color-bleu-de-france: rgb(37, 138, 239);
$color-bleu-de-france-darker: rgb(12, 87, 161);
$color-bleu-de-france-lighter: rgb(132, 189, 246);
$color-ucla-gold-dark: rgb(230, 164, 0);
$color-vermilion-light: rgb(239, 101, 82);
$color-vermilion-dark: rgb(201, 40, 19);
$color-ucla-gold-light: rgb(255, 204, 77);
$color-rich-black: rgb(0, 17, 35);
$color-cloud: rgb(233, 243, 253);
$color-oxford-blue: rgb(0, 38, 77);
$color-vermilion: rgb(235, 59, 36);
$font-size-xxl: 45px;
$font-size-xl: 32px;
$font-size-l: 26px;
$font-size-m: 20px;
$font-size-s: 16px;
$font-size-xs: 14px;
$font-size-xxs: 12px;
$font-size-xxxs: 11px;
$font-helvetica: 'Helvetica Neue', Helvetica, Arial, Roboto, 'Lucida Grande', sans-serif;
$font-museo: Museo, 'Helvetica Neue', Helvetica, Arial, Roboto, 'Lucida Grande', sans-serif;
$weight-bold: 700;
$weight-normal: 400;
$weight-light: 200;
$weight-semi-bold: 600;
$helvetica: 'Helvetica Neue', Helvetica, Arial, Roboto, 'Lucida Grande', sans-serif;
$font-heading: 'Fira Sans', Helvetica, Arial, sans-serif;
$font-text: 'Fira Sans', Helvetica, Arial, sans-serif;
$opacity-disabled: 0.5;
$height-footer: 64px;
$tappable-square: 44px;
$height-input: 58px;
$height-input-small: 44px;
$width-tooltip: 220px;
$duration-quickly: 0.08s;
$duration-medium: 0.2s;
$duration-slowly: 0.5s;
$z-index-modal: 9999;
$z-index-sticky: 100;
$media-query-m: (min-width: 768px);
$media-query-l: (min-width: 1024px);
$shadow-s: 0 0 0 1px rgba(92,106,196,.1);
$shadow-callout: -1px 1px 2px 0 rgba(0, 0, 0, .19);
$btn-shade-hover: inset 0 -3px 0 0 rgba(0, 0, 0, 0.4);
$btn-shade-active: inset 0 3px 4px 0 rgba(0, 0, 0, 0.4);
$letter-spacing-xl: 2px;
$letter-spacing-l: 1px;
$letter-spacing-m: 0;
$letter-spacing-sm: -0.25px;
$letter-spacing-s: -0.5px;
$letter-spacing-xs: -1px;
$radius-default: 3px;
$radius-s: 4px;
$radius-m: 6px;
$radius-l: 9px;
$radius-xl: 12px;
$radius-circle: 50%;
$space-xl: 40px;
$space-xxxl: 60px;
$space-xxxxl: 80px;
$space-xxl: 50px;
$space-l: 30px;
$space-xs: 15px;
$space-xxxs: 8px;
$space-m: 25px;
$space-xxxxs: 5px;
$space-xxs: 10px;
$space-s: 20px;
$line-height-h4: 32px;
$line-height-h3v2museo: 30px;
$line-height-h2: 48px;
$line-height-h4v2: 26px;
$line-height-h3v2: 31px;
$line-height-h4v3: 24px;
$line-height-h5: 25px;
$line-height-h5v2: 20px;
$line-height-h6v2: 17px;
$line-height-h4v3museo: 23px;
$line-height-tiny: 14px;
$line-height-h5v2museo: 18px;
$line-height-h6: 22px;
$line-height-h3: 39px;
$line-height-h1: 62px;
$prefix-component: periodic-;
$prefix-vuex-module: Periodic;
$periodic-component-class: base;

/* VUE DESIGN SYSTEM SPACING HELPERS
--------------------------------------------- */

$spacing-ratio: 1.7;

/*
  INSET-SPACE: For interface containers.
  INSET-SQUISH-SPACE: For buttons, form elements, cells.
  STACK-SPACE: For vertically stacked content.
  INLINE-SPACE: For things displayed inline.
*/

// Create inset-space
//
// @param  {Number} inset-space to set
@mixin inset-space($value) {
  padding: $value;
}

// Create inset-squish-space
//
// @param  {Number} inset-squish-space to set
@mixin inset-squish-space($value) {
  padding: round($value / $spacing-ratio - 1px) $value round($value / $spacing-ratio);
}

// Create stack-space
//
// @param  {Number} stack-space to set
@mixin stack-space($value) {
  margin-bottom: $value;
  &:last-child {
    margin-bottom: 0;
  }
}

// Create inline-space
//
// @param  {Number} inline-space to set
@mixin inline-space($value) {
  margin-right: $value;
  &:last-child {
    margin-right: 0;
  }
}

/* GLOBAL MIXINS
--------------------------------------------- */

/* AUTO SCALING FOR TYPE WITH MIN/MAX SIZES

  @param {Number}  $responsive  - Viewport-based size
  @param {Number}  $min         - Minimum font size (px)
  @param {Number}  $max         - Maximum font size (px) (optional)

  @param {Number}  $fallback    - Fallback for viewport-based units (optional)

  @example SCSS - 5vw size, 35px min & 150px max size + 50px fallback:

  @include responsive-font(5vw, 35px, 150px, 50px);
*/
@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == "vh", "height", "width");
  $min-breakpoint: $min / $responsive-unitless * 100;

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }

  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }

  @if $fallback {
    font-size: $fallback;
  }

  font-size: $responsive;
}

// Reset
@mixin reset {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

// Used to prevent text selection on an element
@mixin prevent-user-select {
  -webkit-user-select: none;
  -moz-user-select: none;
  user-select: none;
}

/// Used to hide an element visually, but keeping it accessible for
/// accessibility tools.
@mixin visually-hidden {
  // Need to make sure we override any existing styles.
  position: absolute !important;
  top: 0;
  clip: rect(1px, 1px, 1px, 1px) !important;
  overflow: hidden !important;
  height: 1px !important;
  width: 1px !important;
  padding: 0 !important;
  border: 0 !important;
}

/// To be used on flex items. Resolves some common layout issues, such as
/// text truncation not respecting padding or breaking out of container.
/// https://css-tricks.com/flexbox-truncated-text/
@mixin layout-flex-fix {
  min-width: 0;
  max-width: 100%;
}

@mixin block($name) {
  &.#{_b($name)} {
    @content;
  }
}

@mixin b($name) {
  @include block($name) {
    @content;
  }
}

@mixin is($state) {
  &.#{_is($state)} {
    @content;
  }
}

@mixin has($name) {
  &.#{_has($name)} {
    @content;
  }
}

/* GLOBAL FUNCTIONS
--------------------------------------------- */

// Create a tint
//
// @param  {Color}  $color to tint
// @param  {Number} $percentage of `$color` in returned color
// @return {Color}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

// Create a shade
//
// @param  {Color}  $color to shade
// @param  {Number} $percentage of `$color` in returned color
// @return {Color}
@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

// Calculate color difference
// See https://www.w3.org/TR/AERT/#color-contrast for algorithm
//
// @param  {Color} $color of foreground
// @param  {Color} $color of background
// @return {Boolean}
@function color-difference($foreground, $background) {
  $r: (max(red($foreground), red($background))) - (min(red($foreground), red($background)));
  $g: (max(green($foreground), green($background))) - (min(green($foreground), green($background)));
  $b: (max(blue($foreground), blue($background))) - (min(blue($foreground), blue($background)));
  $sum-rgb: $r + $g + $b;

  @if $sum-rgb < 350 {
    @return "false";
  } @else {
    @return "true";
  }
}

// Set text color based on contrast
//
// @param  {Color}  $color to set
// @param  {Color}  $background color to test
// @param  {Color}  $fallback color to set in case contrast check fails
@function set-text-color($color, $background, $fallback: null) {
  @if $fallback == null {
    $fallback: #000;
  }
  @if (color-difference($color, $background) == "false") {
    @return $fallback;
  } @else {
    @return $color;
  }
}

/// Darkens the foreground color by the background color. This is the same as the
/// “multiply” filter in graphics apps.
///
/// @param {Color} $foreground - The color to darken.
/// @param {Color} $background - The background to base darkening on.
/// @return {Color} The modified color.
@function color-multiply($foreground, $background: null) {
  @if $background == null {
    $background: #ffffff;
  }

  @return $foreground * $background / 255;
}

/// Returns the value in rem for a given pixel value.
/// @param {Number} $value - The pixel value to be converted.
/// @return {Number} The converted value in rem.
// @function rem($value) {
//   $unit: unit($value);
//
//   @if $unit == "rem" {
//     @return $value;
//   } @else if $unit == "px" {
//     @return $value / $size-m * 1rem;
//   } @else if $unit == "em" {
//     @return $unit / 1em * 1rem;
//   } @else {
//     @error "Value must be in px, em, or rem.";
//   }
// }

/// Returns the value in pixels for a given rem value.
/// @param {Number} $value - The rem value to be converted.
/// @return {Number} The converted value in pixels.
// @function px($value) {
//   $unit: unit($value);
//
//   @if $unit == "px" {
//     @return $value;
//   } @else if $unit == "em" {
//     @return ($value / 1em) * $size-m;
//   } @else if $unit == "rem" {
//     @return ($value / 1rem) * $size-m;
//   } @else {
//     @error "Value must be in rem, em, or px.";
//   }
// }

/// Returns the list of available names in a given map.
/// @param {Map} $map - The map of data to list the names from.
/// @param {Number} $map - The level of depth to get names from.
/// @return {String} The list of names in the map.
@function available-names($map, $level: 1) {
  @if type-of($map) != "map" {
    @return null;
  }

  $output: "";
  $newline: "\A ";

  @if $level == 1 {
    @each $key, $value in $map {
      $output: $output + "#{$newline}- #{$key} #{available-names($value, $level + 1)}";
    }
  } @else {
    $output: "(";
    $i: 1;

    @each $key, $value in $map {
      $sep: if($i < length($map), ", ", "");
      $output: $output + "#{$key}#{$sep}#{available-names($value, $level + 1)}";
      $i: $i + 1;
    }

    $output: $output + ")";
  }

  @return $output;
}

// Returns a (prefixed) BEM block name
//
// @param  {String} $name of the block
// @return {String}
@function _b($name) {
  @return $prefix-component + $name;
}

// Returns a BEM element name
//
// @param  {String} $name of the element
// @return {String}
@function _e($name) {
  @return '__' + $name;
}

// Returns a BEM module name
//
// @param  {String} $name of the module
// @return {String}
@function _m($name) {
  @return '--' + $name;
}

// Returns a BEM state (is-x) name
//
// @param  {String} $state name
// @return {String}
@function _is($state) {
  @return 'is-' + $state;
}

// Returns a BEM has (has-x) name
//
// @param  {String} $name of the property
// @return {String}
@function _has($name) {
  @return 'has-' + $name;
}
